/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allavona.tfg.frontapp.business.webclient.api;

import com.allavona.tfg.frontapp.business.webclient.ApiCallback;
import com.allavona.tfg.frontapp.business.webclient.ApiClient;
import com.allavona.tfg.frontapp.business.webclient.ApiException;
import com.allavona.tfg.frontapp.business.webclient.ApiResponse;
import com.allavona.tfg.frontapp.business.webclient.Configuration;
import com.allavona.tfg.frontapp.business.webclient.Pair;

import com.google.gson.reflect.TypeToken;


import com.allavona.tfg.frontapp.business.webclient.model.ClasificacionIncidente;
import com.allavona.tfg.frontapp.business.webclient.model.Incidente;
import com.allavona.tfg.frontapp.business.webclient.model.IncidenteDTO;
import com.allavona.tfg.frontapp.business.webclient.model.TipoRecurso;
import org.springframework.stereotype.Service;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class IncidentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IncidentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncidentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buscarClasificacionIncidente
     * @param codigo Inicio del código que se está buscando. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarClasificacionIncidenteCall(String codigo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incidents/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codigo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codigo", codigo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buscarClasificacionIncidenteValidateBeforeCall(String codigo, final ApiCallback _callback) throws ApiException {
        return buscarClasificacionIncidenteCall(codigo, _callback);

    }

    /**
     * Busca la clasificación incidente
     * Este servicio permite realizar una búsqueda de las clasificaciones de los incidentes a partir del comienzo de su código.
     * @param codigo Inicio del código que se está buscando. (optional)
     * @return ClasificacionIncidente
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public ClasificacionIncidente buscarClasificacionIncidente(String codigo) throws ApiException {
        ApiResponse<ClasificacionIncidente> localVarResp = buscarClasificacionIncidenteWithHttpInfo(codigo);
        return localVarResp.getData();
    }

    /**
     * Busca la clasificación incidente
     * Este servicio permite realizar una búsqueda de las clasificaciones de los incidentes a partir del comienzo de su código.
     * @param codigo Inicio del código que se está buscando. (optional)
     * @return ApiResponse&lt;ClasificacionIncidente&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClasificacionIncidente> buscarClasificacionIncidenteWithHttpInfo(String codigo) throws ApiException {
        okhttp3.Call localVarCall = buscarClasificacionIncidenteValidateBeforeCall(codigo, null);
        Type localVarReturnType = new TypeToken<ClasificacionIncidente>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Busca la clasificación incidente (asynchronously)
     * Este servicio permite realizar una búsqueda de las clasificaciones de los incidentes a partir del comienzo de su código.
     * @param codigo Inicio del código que se está buscando. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarClasificacionIncidenteAsync(String codigo, final ApiCallback<ClasificacionIncidente> _callback) throws ApiException {

        okhttp3.Call localVarCall = buscarClasificacionIncidenteValidateBeforeCall(codigo, _callback);
        Type localVarReturnType = new TypeToken<ClasificacionIncidente>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buscarIncidentes
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param closed Parámetro que indica si el incidente ya ha sido finalizado. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarIncidentesCall(Integer USER_ID, Boolean closed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (closed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("closed", closed));
        }

        if (USER_ID != null) {
            localVarHeaderParams.put("USER-ID", localVarApiClient.parameterToString(USER_ID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buscarIncidentesValidateBeforeCall(Integer USER_ID, Boolean closed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'USER_ID' is set
        if (USER_ID == null) {
            throw new ApiException("Missing the required parameter 'USER_ID' when calling buscarIncidentes(Async)");
        }

        return buscarIncidentesCall(USER_ID, closed, _callback);

    }

    /**
     * Realiza una búsqueda de incidentes
     * Este servicio permite realizar una búsqueda de los incidentes, especificando si están aún en curso o no.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param closed Parámetro que indica si el incidente ya ha sido finalizado. (optional)
     * @return List&lt;Incidente&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
     </table>
     */
    public List<Incidente> buscarIncidentes(Integer USER_ID, Boolean closed) throws ApiException {
        ApiResponse<List<Incidente>> localVarResp = buscarIncidentesWithHttpInfo(USER_ID, closed);
        return localVarResp.getData();
    }

    /**
     * Realiza una búsqueda de incidentes
     * Este servicio permite realizar una búsqueda de los incidentes, especificando si están aún en curso o no.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param closed Parámetro que indica si el incidente ya ha sido finalizado. (optional)
     * @return ApiResponse&lt;List&lt;Incidente&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incidente>> buscarIncidentesWithHttpInfo(Integer USER_ID, Boolean closed) throws ApiException {
        okhttp3.Call localVarCall = buscarIncidentesValidateBeforeCall(USER_ID, closed, null);
        Type localVarReturnType = new TypeToken<List<Incidente>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Realiza una búsqueda de incidentes (asynchronously)
     * Este servicio permite realizar una búsqueda de los incidentes, especificando si están aún en curso o no.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param closed Parámetro que indica si el incidente ya ha sido finalizado. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarIncidentesAsync(Integer USER_ID, Boolean closed, final ApiCallback<List<Incidente>> _callback) throws ApiException {

        okhttp3.Call localVarCall = buscarIncidentesValidateBeforeCall(USER_ID, closed, _callback);
        Type localVarReturnType = new TypeToken<List<Incidente>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buscarPlantillaClasificacionIncidente
     * @param id Identificador de la clasificación del incidente. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarPlantillaClasificacionIncidenteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incidents/classifications/{id}/recommended-resources-type-list"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buscarPlantillaClasificacionIncidenteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling buscarPlantillaClasificacionIncidente(Async)");
        }

        return buscarPlantillaClasificacionIncidenteCall(id, _callback);

    }

    /**
     * Obtiene la lista de recursos a movilizar para una clasificación
     * Este servicio devuelve el listado de los tipos de recursos recomendados a movilizar para una clasificación de incidente determinada
     * @param id Identificador de la clasificación del incidente. (required)
     * @return TipoRecurso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public TipoRecurso buscarPlantillaClasificacionIncidente(Integer id) throws ApiException {
        ApiResponse<TipoRecurso> localVarResp = buscarPlantillaClasificacionIncidenteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Obtiene la lista de recursos a movilizar para una clasificación
     * Este servicio devuelve el listado de los tipos de recursos recomendados a movilizar para una clasificación de incidente determinada
     * @param id Identificador de la clasificación del incidente. (required)
     * @return ApiResponse&lt;TipoRecurso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TipoRecurso> buscarPlantillaClasificacionIncidenteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = buscarPlantillaClasificacionIncidenteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TipoRecurso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtiene la lista de recursos a movilizar para una clasificación (asynchronously)
     * Este servicio devuelve el listado de los tipos de recursos recomendados a movilizar para una clasificación de incidente determinada
     * @param id Identificador de la clasificación del incidente. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No se han encontrado resultados </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buscarPlantillaClasificacionIncidenteAsync(Integer id, final ApiCallback<TipoRecurso> _callback) throws ApiException {

        okhttp3.Call localVarCall = buscarPlantillaClasificacionIncidenteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TipoRecurso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crearIncidente
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param incidenteDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Incidente creado con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crearIncidenteCall(Integer USER_ID, IncidenteDTO incidenteDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incidenteDTO;

        // create path and map variables
        String localVarPath = "/v1/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (USER_ID != null) {
            localVarHeaderParams.put("USER-ID", localVarApiClient.parameterToString(USER_ID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crearIncidenteValidateBeforeCall(Integer USER_ID, IncidenteDTO incidenteDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'USER_ID' is set
        if (USER_ID == null) {
            throw new ApiException("Missing the required parameter 'USER_ID' when calling crearIncidente(Async)");
        }

        // verify the required parameter 'incidenteDTO' is set
        if (incidenteDTO == null) {
            throw new ApiException("Missing the required parameter 'incidenteDTO' when calling crearIncidente(Async)");
        }

        return crearIncidenteCall(USER_ID, incidenteDTO, _callback);

    }

    /**
     * Crea un nuevo incidente
     * Este servicio permite crear un nuevo incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param incidenteDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Incidente creado con éxito </td><td>  -  </td></tr>
     </table>
     */
    public void crearIncidente(Integer USER_ID, IncidenteDTO incidenteDTO) throws ApiException {
        crearIncidenteWithHttpInfo(USER_ID, incidenteDTO);
    }

    /**
     * Crea un nuevo incidente
     * Este servicio permite crear un nuevo incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param incidenteDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Incidente creado con éxito </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> crearIncidenteWithHttpInfo(Integer USER_ID, IncidenteDTO incidenteDTO) throws ApiException {
        okhttp3.Call localVarCall = crearIncidenteValidateBeforeCall(USER_ID, incidenteDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Crea un nuevo incidente (asynchronously)
     * Este servicio permite crear un nuevo incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param incidenteDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Incidente creado con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crearIncidenteAsync(Integer USER_ID, IncidenteDTO incidenteDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = crearIncidenteValidateBeforeCall(USER_ID, incidenteDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for obtenerIncidente
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param id Identificador del incidente. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call obtenerIncidenteCall(Integer USER_ID, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incidents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (USER_ID != null) {
            localVarHeaderParams.put("USER-ID", localVarApiClient.parameterToString(USER_ID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call obtenerIncidenteValidateBeforeCall(Integer USER_ID, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'USER_ID' is set
        if (USER_ID == null) {
            throw new ApiException("Missing the required parameter 'USER_ID' when calling obtenerIncidente(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling obtenerIncidente(Async)");
        }

        return obtenerIncidenteCall(USER_ID, id, _callback);

    }

    /**
     * Obtiene el detalle de un incidente
     * Este servicio permite consultar el detalle completo de un incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param id Identificador del incidente. (required)
     * @return Incidente
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public Incidente obtenerIncidente(Integer USER_ID, Integer id) throws ApiException {
        ApiResponse<Incidente> localVarResp = obtenerIncidenteWithHttpInfo(USER_ID, id);
        return localVarResp.getData();
    }

    /**
     * Obtiene el detalle de un incidente
     * Este servicio permite consultar el detalle completo de un incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param id Identificador del incidente. (required)
     * @return ApiResponse&lt;Incidente&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incidente> obtenerIncidenteWithHttpInfo(Integer USER_ID, Integer id) throws ApiException {
        okhttp3.Call localVarCall = obtenerIncidenteValidateBeforeCall(USER_ID, id, null);
        Type localVarReturnType = new TypeToken<Incidente>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtiene el detalle de un incidente (asynchronously)
     * Este servicio permite consultar el detalle completo de un incidente.
     * @param USER_ID Id del usuario que está haciendo la petición. (required)
     * @param id Identificador del incidente. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Acceso no autorizado </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Consulta finalizada con éxito </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call obtenerIncidenteAsync(Integer USER_ID, Integer id, final ApiCallback<Incidente> _callback) throws ApiException {

        okhttp3.Call localVarCall = obtenerIncidenteValidateBeforeCall(USER_ID, id, _callback);
        Type localVarReturnType = new TypeToken<Incidente>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
